{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ENDPOINTS } from '../rest-endpoint';\nimport { Validators } from '@angular/forms';\nlet MyAccountComponent = class MyAccountComponent {\n  constructor(http, jwtdeco, fb, router) {\n    this.http = http;\n    this.jwtdeco = jwtdeco;\n    this.fb = fb;\n    this.router = router;\n    this.userExist = false;\n    this.userForm = this.fb.group({\n      userName: ['', Validators.required],\n      password: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      name: ['', Validators.required],\n      age: ['', [Validators.required, Validators.min(1)]],\n      dob: ['', Validators.required],\n      Admin: [false] //When updating user accounts we cant change account type so this value has no effect\n    });\n  }\n\n  ngOnInit() {\n    this.userName = this.jwtdeco.getUserName();\n    this.http.get(ENDPOINTS.GETINFO + this.userName).subscribe(data => {\n      this.user = data;\n      this.userForm.get('userName')?.setValue(this.user.userName);\n      this.userForm.get('password')?.setValue(this.user.password);\n      this.userForm.get('email')?.setValue(this.user.email);\n      this.userForm.get('name')?.setValue(this.user.name);\n      this.userForm.get('age')?.setValue(this.user.age);\n      this.userForm.get('dob')?.setValue(this.user.dob);\n    });\n  }\n  onSubmit(user) {\n    this.http.get(ENDPOINTS.CHECK + user.userName).subscribe(data => {\n      if (!data || this.jwtdeco.getUserName() == user.userName) {\n        this.http.put(ENDPOINTS.UPDATE, user).subscribe(response => {\n          this.user = response;\n          const currentUrl = this.router.url;\n          this.router.navigateByUrl('/', {\n            skipLocationChange: true\n          }).then(() => {\n            this.router.navigate([currentUrl]);\n          });\n        });\n      } else {\n        this.userExist = true;\n      }\n    });\n  }\n};\nMyAccountComponent = __decorate([Component({\n  selector: 'app-my-account',\n  templateUrl: './my-account.component.html',\n  styleUrls: ['./my-account.component.css']\n})], MyAccountComponent);\nexport { MyAccountComponent };","map":{"version":3,"names":["Component","ENDPOINTS","Validators","MyAccountComponent","constructor","http","jwtdeco","fb","router","userExist","userForm","group","userName","required","password","email","name","age","min","dob","Admin","ngOnInit","getUserName","get","GETINFO","subscribe","data","user","setValue","onSubmit","CHECK","put","UPDATE","response","currentUrl","url","navigateByUrl","skipLocationChange","then","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/shakilabandara/Desktop/LoginSystem/loginClient/src/app/edit-user/edit-user.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { ENDPOINTS } from '../rest-endpoint';\nimport { JwtService } from '../services/jwtservice.service';\nimport { UserDto } from '../dto/UserDto';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-my-account',\n  templateUrl: './my-account.component.html',\n  styleUrls: ['./my-account.component.css']\n})\nexport class MyAccountComponent implements OnInit{\n  userForm!:FormGroup\n  user!:UserDto;\n  userName!:string;\n  userExist: boolean = false;\n\n  constructor(private http:HttpClient,private jwtdeco:JwtService,private fb:FormBuilder,private router:Router){\n    this.userForm = this.fb.group({\n      userName: ['', Validators.required],\n      password: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      name: ['', Validators.required],\n      age: ['', [Validators.required, Validators.min(1)]],\n      dob: ['', Validators.required],\n      Admin:[false] //When updating user accounts we cant change account type so this value has no effect\n    });\n  }\n  ngOnInit(): void {\n    this.userName=this.jwtdeco.getUserName();\n    this.http.get<UserDto>(ENDPOINTS.GETINFO+this.userName).subscribe(\n     ( data )=> {\n        this.user=data;\n        this.userForm.get('userName')?.setValue(this.user.userName);\n        this.userForm.get('password')?.setValue(this.user.password);\n        this.userForm.get('email')?.setValue(this.user.email);\n        this.userForm.get('name')?.setValue(this.user.name);\n        this.userForm.get('age')?.setValue(this.user.age);\n        this.userForm.get('dob')?.setValue(this.user.dob);   \n      }\n    )\n  }\n\n  onSubmit(user:UserDto){\n\n    this.http.get(ENDPOINTS.CHECK+user.userName).subscribe(\n      (data) => {\n        if (!data || (this.jwtdeco.getUserName()==user.userName)){\n          this.http.put<UserDto>(ENDPOINTS.UPDATE,user).subscribe(\n            (response)=> {\n              this.user=response;\n              const currentUrl = this.router.url;\n              this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\n              this.router.navigate([currentUrl]);\n              });\n          })\n        }\n        else{\n          this.userExist=true;\n        }\n      }\n    )   \n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}